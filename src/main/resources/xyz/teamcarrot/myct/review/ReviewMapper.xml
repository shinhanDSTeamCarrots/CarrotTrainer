<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xyz.teamcarrot.myct.review.ReviewMapper">

	<insert id="insertReview" parameterType="xyz.teamcarrot.myct.review.ReviewVO">
		INSERT INTO tb_review (
			  content
			, point
			, regist_date
			, like_cnt
			, goods_no
			, member_no
		)	VALUES (
			  #{content}
			, #{point}
			, NOW()
			, 0
			, #{goods_no}
			, #{member_no} 
		)
		<selectKey keyProperty="review_no" order="AFTER" resultType="int">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<update id="updateReview" parameterType="xyz.teamcarrot.myct.review.ReviewVO">
		UPDATE 	tb_review
		SET		content = #{content}
			  , point   = #{point}
		WHERE review_no = #{review_no}
	</update>
	
	<select id="selectReview" parameterType="map" resultType="xyz.teamcarrot.myct.review.ReviewVO">
		SELECT	r.review_no AS review_no
			  , r.content AS content
			  , r.point AS point
			  , r.regist_date AS regist_date
			  , r.like_cnt AS like_cnt
			  , r.goods_no AS goods_no
			  , r.member_no AS member_no
			  , IFNULL(m.member_nickname,m.member_name) AS member_name
			  , g.goods_name as goods_name
			  , CASE
			  		WHEN l.review_like_no IS NOT NULL THEN '1'
			  		ELSE '0'
			  	END AS self_like
		FROM tb_review AS r
			JOIN tb_member AS m 
									 ON r.member_no = m.member_no
			LEFT JOIN tb_goods AS g
							   ON g.goods_no = r.goods_no
			LEFT JOIN tb_review_like AS l
									 ON r.goods_no = l.goods_no
									AND r.member_no = #{self_no}
		WHERE
				0 = 0
			<choose>
				<!-- 특정 유저가 쓴 리뷰 검색 (자기가 쓴 코드 포함) -->
				<when test='searchType.equals("member_search")'>
				AND r.member_no = #{self_no}
				</when>
				<!-- 일반 상품에서 리뷰 검색 -->
				<otherwise>
				AND r.goods_no = #{goods_no}
				</otherwise>
			</choose>
				
		ORDER BY
		<!-- 나중에 종류별로 바꿀 수 있도록 처리 -->
		<choose>
			<when test='alignType.equals("like_desc")'>
				r.like_cnt DESC
			</when>
			<when test='alignType.equals("like_asc")'>
				r.like_cnt ASC
			</when>
			<when test='alignType.equals("regist_asc")'>
				r.regist_date ASC
			</when>
			<when test='alignType.equals("point_desc")'>
				r.point DESC
			</when>
			<when test='alignType.equals("point_asc")'>
				r.point ASC
			</when>
			<otherwise>
				r.regist_date DESC
			</otherwise>
		</choose>
		LIMIT	${page}, 10
	</select>
	
	<delete id="deleteReview" parameterType="int">
		DELETE FROM tb_review
		WHERE review_no = #{review_no}
	</delete>
	
	<update id="likeReview" parameterType="map">
	<!-- 
		UPDATE tb_review
		SET review_cnt = ( SELECT COUNT(*) FROM tb_review_like WHERE review_no = ${review_no} AND member_no = ${member_no})
		WHERE review_no = ${review_no}
	 -->
	</update>
	
	
	<update id="dislikeReview" parameterType="map">
	<!-- 
		UPDATE tb_review
		SET review_cnt = review_cnt - 1
		WHERE review_no = ${review_no}
	 -->
	</update>
	
	
	<!-- select id="count" parameterType="kr.co.project.comment.CommentVO" resultType="int">
		select count(*) from comment
		where parent_no = #{parent_no}
	</select-->
	
	<!-- select id="list" parameterType="kr.co.project.comment.CommentVO" resultType="kr.co.project.comment.CommentVO">
		select *,
			(select name from user where no=comment.user_no) as user_name
		from comment
		where parent_no = #{parent_no}
		order by writedate desc
		limit ${startIdx}, 10
	</select-->
	<!-- select id="all" parameterType="kr.co.project.comment.CommentVO" resultType="kr.co.project.comment.CommentVO">
		select *,
			(select name from user where no=comment.user_no) as user_name
		from comment
		where parent_no = #{parent_no}
		order by writedate desc
	</select-->
	
	<!--delete id="delete" parameterType="int">
		delete from comment where no = #{no}
	</delete-->

</mapper>