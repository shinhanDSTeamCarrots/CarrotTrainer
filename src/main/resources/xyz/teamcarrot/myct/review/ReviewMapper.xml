<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xyz.teamcarrot.myct.review.ReviewMapper">

	<insert id="insertReview" parameterType="xyz.teamcarrot.myct.review.ReviewVO">
		INSERT INTO tb_review (
			  content
			, point
			, regist_date
			, like_cnt
			, goods_no
			, member_no
			, image
		)	VALUES (
			  #{content}
			, #{point}
			, NOW()
			, 0
			, #{goods_no}
			, #{member_no} 
			, #{image}
		)
		<selectKey keyProperty="review_no" order="AFTER" resultType="int">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<update id="updateReview" parameterType="xyz.teamcarrot.myct.review.ReviewVO">
		UPDATE 	tb_review
		SET		content = #{content}
			  , point   = #{point}
			  <if test="image != null">
			  , image 	= #{image}
			  </if>
		WHERE review_no = #{review_no}
	</update>
	
	<select id="selectReview" parameterType="map" resultType="xyz.teamcarrot.myct.review.ReviewVO">
		SELECT	r.review_no AS review_no
			  , r.content AS content
			  , r.point AS point
			  , r.regist_date AS regist_date
			  , r.like_cnt AS like_cnt
			  , r.goods_no AS goods_no
			  , r.member_no AS member_no
			  , IFNULL(m.member_nickname,m.member_name) AS member_name
			  , g.goods_name as goods_name
			  , CASE
			  		WHEN l.review_like_no IS NOT NULL THEN '1'
			  		ELSE '0'
			  	END AS self_like
			  , r.image
		FROM tb_review AS r
			JOIN tb_member AS m 
									 ON r.member_no = m.member_no
			LEFT JOIN tb_goods AS g
							   ON g.goods_no = r.goods_no
			LEFT JOIN tb_review_like AS l
									 ON r.review_no = l.review_no
									AND l.member_no = #{self_no}
		WHERE
				0 = 0
			<choose>
				<!-- 특정 유저가 쓴 리뷰 검색 (자기가 쓴 코드 포함) -->
				<when test='searchType.equals("member_search")'>
				AND r.member_no = #{self_no}
				</when>
				<!-- 일반 상품에서 리뷰 검색 -->
				<otherwise>
				AND r.goods_no = #{goods_no}
				</otherwise>
			</choose>
				
		ORDER BY
		<!-- 나중에 종류별로 바꿀 수 있도록 처리 -->
		<choose>
			<when test='alignType.equals("like_desc")'>
				r.like_cnt DESC
			</when>
			<when test='alignType.equals("like_asc")'>
				r.like_cnt ASC
			</when>
			<when test='alignType.equals("regist_asc")'>
				r.regist_date ASC
			</when>
			<when test='alignType.equals("point_desc")'>
				r.point DESC
			</when>
			<when test='alignType.equals("point_asc")'>
				r.point ASC
			</when>
			<otherwise>
				r.regist_date DESC
			</otherwise>
		</choose>
		LIMIT	${page}, 10
	</select>
	
	<delete id="deleteReview" parameterType="int">
		DELETE FROM tb_review
		WHERE review_no = #{review_no}
	</delete>
	
	<update id="likeReview" parameterType="map">
		UPDATE tb_review
		<!-- NULL 에러 떔에 바꿈 -->
		<!-- SET like_cnt = ( SELECT NVL(COUNT(*),0) FROM tb_review_like WHERE review_no = ${review_no} GROUP BY review_no) -->
		SET like_cnt = (SELECT NVL(VAL, 0) FROM( SELECT NVL(COUNT(*),0) AS VAL FROM tb_review_like WHERE review_no = ${review_no} GROUP BY review_no) AS T )
		WHERE review_no = ${review_no}
	</update>
	
	
	<update id="dislikeReview" parameterType="map">
		UPDATE tb_review
		SET like_cnt = like_cnt - 1
		WHERE review_no = ${review_no}
	</update>
	
	<update id="goodsTableUpdate" parameterType="int">
		UPDATE tb_goods
		SET goods_rate = (SELECT AVG( 1.0 *IFNULL( point,0)) / 2.0 FROM tb_review WHERE goods_no=${goods_no} GROUP BY goods_no)
		WHERE goods_no=${goods_no}
	</update>
	
	<select id="selectListData" resultType="map" parameterType="int">
		<!-- 기초 데이터 검색 -->
		<!-- 페이지 수, 평균 포인트, 포인트 별 값 -->
		SELECT
			  CAST(((COUNT(*)+1) / 10) AS INT) AS total_page
			, COUNT(*) AS total_cnt
			, IFNULL(AVG(1.0 * point) / 2.0,0) AS avg_point
			, COUNT(CASE WHEN point = 2 THEN 1 WHEN point = 3 THEN 1 END) as point_1
			, COUNT(CASE WHEN point = 4 THEN 1 WHEN point = 5 THEN 1 END) as point_2
			, COUNT(CASE WHEN point = 6 THEN 1 WHEN point = 7 THEN 1 END) as point_3
			, COUNT(CASE WHEN point = 8 THEN 1 WHEN point = 9 THEN 1 END) as point_4
			, COUNT(CASE WHEN point = 10 THEN 1 END) as point_5
			, goods_no
		FROM tb_review
		WHERE goods_no = ${goods_no}
	</select>
	
	<select id="getSpecificReview" resultType="xyz.teamcarrot.myct.review.ReviewVO" parameterType="map">
		SELECT	r.review_no AS review_no
			  , r.content AS content
			  , r.point AS point
			  , r.regist_date AS regist_date
			  , r.like_cnt AS like_cnt
			  , r.goods_no AS goods_no
			  , r.member_no AS member_no
			  , IFNULL(m.member_nickname,m.member_name) AS member_name
			  , g.goods_name as goods_name
			  , r.image
		FROM tb_review AS r
			JOIN tb_member AS m 
									 ON r.member_no = m.member_no
			LEFT JOIN tb_goods AS g
							   ON g.goods_no = r.goods_no
		WHERE
				0 = 0
				AND r.review_no = #{review_no}
	
	</select>
	
	<!-- select id="count" parameterType="kr.co.project.comment.CommentVO" resultType="int">
		select count(*) from comment
		where parent_no = #{parent_no}
	</select-->
	
	<!-- select id="list" parameterType="kr.co.project.comment.CommentVO" resultType="kr.co.project.comment.CommentVO">
		select *,
			(select name from user where no=comment.user_no) as user_name
		from comment
		where parent_no = #{parent_no}
		order by writedate desc
		limit ${startIdx}, 10
	</select-->
	<!-- select id="all" parameterType="kr.co.project.comment.CommentVO" resultType="kr.co.project.comment.CommentVO">
		select *,
			(select name from user where no=comment.user_no) as user_name
		from comment
		where parent_no = #{parent_no}
		order by writedate desc
	</select-->
	
	<!--delete id="delete" parameterType="int">
		delete from comment where no = #{no}
	</delete-->

</mapper>